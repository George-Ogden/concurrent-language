typedef List{T} {Cons (T, List{T}) | Nil};

__::__ = (h : int, t : List{int}) -> List{int} {
    Cons{int}{(h, t)}
};

map{T,U} = (f: T -> U, xs: List{T}) -> List{U} {
    __::__ = (h : U, t : List{U}) -> List{U} {
        Cons{U}{(h, t)}
    };
    match (xs) {
        Cons x: {
            h = x.0;
            t = x.1;
            f(h) :: map{T,U}(f, t)
        },
        Nil : {
            Nil{U}{}
        }
    }
};

__<<-__ = (x: int, n: int) -> int {
    (x << n) - x
};

finite_list = (n: int) -> List{int} {
    // modified from https://stackoverflow.com/a/8831937/12103577
    list_hash = (hash: int, n: int) -> List{int} {
        if (n == 0){
            Nil{int}{}
        } else {
            hash = (hash <<- 5) + n;
            hash :: list_hash(hash, n - 1)
        }
    };
    list_hash(0, n)
};


gt0 = (x: int) -> bool {
    x > 0
};
lt0 = (x: int) -> bool {
    x < 0
};

main = (n: int) -> (List{bool}, List{bool}) {
    xs = finite_list(n);
    (map{int,bool}(gt0, xs), map{int,bool}(lt0, xs))
};
