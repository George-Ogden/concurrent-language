typedef tuple (int, int, float);
typedef trailing (int, int,);
typedef nested ((int, int), (int, int));
typedef f (int -> int) -> int;
typedef g int -> (int -> int);
typedef h int -> int -> int;
typedef i (int) -> int -> int;
typedef j ((int) -> ((int))) -> int;
typedef maybe {some int | none};
typedef list<T> {cons (list<T>, T) | nil};
typedef generic_tuple (f<T>, g<T>);
typedef same_fn<T> fn<T, T>;
typedef tree<T> { Node (tree<T>, T, tree<T>) | Leaf};
typedef direction { left | right};
typedef grid { lower direction | higher direction};
typedef parity {even | odd};
typedef t (parity, direction);
x = left;
y = right;
g = (a, b);
g = (one, odd(5));
g = (one, odd(5));
g = f(one, odd(5));
c = true;
a = 10;
b = foo();
g = foo(5, 10,);
g = foo(5, 10, );
g = foo(10, 5) ;
y = 8 + 8 + 7 + 3 __add__ 4 __minus__ 6;
z = (3, 4);
t = if (a > 4) {
    3
} else {
    b = 8;
    c
};
e = match (maybe()) {
    Some x: {
        t
    };
    None : {
        y
    };
};
m = match (f) {
    Some x | None: {
        t
    };
};
a = () -> () {
    ()
};
a = (x: int) -> int -> int {
    ()
};
a = (x: int, b: bool,) -> (int -> int) {
    ()
};
y = z | a;
h = f @ g;
y = a.1 + 4;
f = a.0.0;
t = a.0.1;
j = t . _b;
__+__ = f;
__<=>__ = if (g) { 1 } else { 2 };
__::__ = cons;
this /*
is a multiline *
comment
*/ = this;
this = this; // is a single line comment
not = the_end;
smap<T> = map<T,T,>;
t = f<int>(4);
typealias map<T> smap<T>;
y = ++4;
z = -y;
something = Some{x};
something = Some{x,};
something = Some<int>{x};
something = Some<int,>{x};
left = Left<int,int>{x};
right = Right<int,int,>{x};
pair = Pair<bool,bool>{x, y};
pair = Pair<bool,bool,>{x, y};
unknown = Integer{8};
